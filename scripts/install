#!/bin/sh

# based on https://github.com/thoughtbot/laptop script

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

dotfiles_root=$(cd -P -- "$(dirname -- "$0")/.." && pwd -P)

fancy_echo() {
  local fmt="$1"; shift
  printf "\n$fmt\n" "$@"
}

brew_install_or_upgrade() {
  if brew_is_installed "$1"; then
    if brew_is_upgradable "$1"; then
      fancy_echo "Upgrading %s..." "$1"
      brew upgrade "$@"
    else
      fancy_echo "Already using the latest version of %s. Skipping..." "$1"
    fi
  else
    fancy_echo "Installing %s..." "$1"
    brew install "$@"
  fi
}

brew_is_installed() {
  local name="$(brew_expand_alias "$1")"
  brew list -1 | grep -Fqx "$name"
}

brew_is_upgradable() {
  local name="$(brew_expand_alias "$1")"
  ! brew outdated --quiet "$name" >/dev/null
}

brew_tap() {
  brew tap "$1" 2> /dev/null
}

brew_expand_alias() {
  brew info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

brew_launchctl_restart() {
  local name="$(brew_expand_alias "$1")"
  local domain="homebrew.mxcl.$name"
  local plist="$domain.plist"

  fancy_echo "Restarting %s..." "$1"
  mkdir -p "$HOME/Library/LaunchAgents"
  ln -sfv "/usr/local/opt/$name/$plist" "$HOME/Library/LaunchAgents"

  if launchctl list | grep -Fq "$domain"; then
    launchctl unload "$HOME/Library/LaunchAgents/$plist" >/dev/null
  fi
  launchctl load "$HOME/Library/LaunchAgents/$plist" >/dev/null
}

download_font(){
  local font_url=$1
  local font_name=$(basename "$font_url" | sed "s/%20/ /g")

  if [ ! -f "$HOME/Library/Fonts/${font_name}" ]; then
    fancy_echo "Downloading $font_name font..."
    wget "$font_url" -q -O "$HOME/Library/Fonts/$font_name"
  else
    fancy_echo "Font $font_name is already installed. Skipping..."
  fi
}

case "$SHELL" in
  */zsh) : ;;
  *)
    fancy_echo "Changing your shell to zsh ..."
      chsh -s "$(which zsh)"
    ;;
esac

if [ ! -f "$HOME/.zshrc" ]; then
  echo "source $dotfiles_root/dotfiles.sh" > "$HOME/.zshrc"
fi

if ! command -v brew > /dev/null; then
  fancy_echo "Installing Homebrew ..."
  curl -fsS "https://raw.githubusercontent.com/Homebrew/install/master/install" | ruby
  export PATH="/usr/local/bin:$PATH"
else
  fancy_echo "Homebrew already installed. Skipping..."
fi

fancy_echo "Updating Homebrew formulas..."
brew update

brew_install_or_upgrade "zsh"
brew_install_or_upgrade "git"
brew_install_or_upgrade "postgres"
brew_launchctl_restart "postgresql"
brew_install_or_upgrade "redis"
brew_launchctl_restart "redis"
brew_install_or_upgrade "the_silver_searcher"
brew_install_or_upgrade "vim"
brew_install_or_upgrade "ctags"
brew_install_or_upgrade "tmux"
brew_install_or_upgrade "reattach-to-user-namespace"
brew_install_or_upgrade "imagemagick"
brew_install_or_upgrade "wget"

brew_install_or_upgrade "openssl"
brew unlink openssl && brew link openssl --force
brew_install_or_upgrade "libyaml"

if ! command -v heroku > /dev/null; then
  fancy_echo "Installing Heroku Toolbelt..."
  wget -O- https://toolbelt.heroku.com/install.sh | sh
else
  fancy_echo "Heroku Toolbelt already installed. Skipping..."
fi

download_font "https://github.com/powerline/fonts/raw/master/SourceCodePro/Sauce%20Code%20Powerline%20Black.otf"
download_font "https://github.com/powerline/fonts/raw/master/SourceCodePro/Sauce%20Code%20Powerline%20Bold.otf"
download_font "https://github.com/powerline/fonts/raw/master/SourceCodePro/Sauce%20Code%20Powerline%20ExtraLight.otf"
download_font "https://github.com/powerline/fonts/raw/master/SourceCodePro/Sauce%20Code%20Powerline%20Light.otf"
download_font "https://github.com/powerline/fonts/raw/master/SourceCodePro/Sauce%20Code%20Powerline%20Medium.otf"
download_font "https://github.com/powerline/fonts/raw/master/SourceCodePro/Sauce%20Code%20Powerline%20Regular.otf"
download_font "https://github.com/powerline/fonts/raw/master/SourceCodePro/Sauce%20Code%20Powerline%20Semibold.otf"

fancy_echo "Fetching git submodules..."
cd $dotfiles_root
git submodule init
git submodule update

